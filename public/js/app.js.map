{"version":3,"file":"public\\js\\app.js","sources":["app/main.coffee","app/storage.coffee","app/util.coffee"],"names":[],"mappings":"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","sourcesContent":["util = require('util')\r\n\r\nString.prototype.replaceAll = (search, replace) ->\r\n    if not replace?\r\n        return @toString()\r\n    @split(search).join(replace)\r\n\r\ngongSound = new Audio('gong.mp3')\r\n\r\nringGong = ->\r\n    gongSound.play()\r\n\r\nscrollChatToBottom = ->\r\n    $('.chat-container').stop().animate({\r\n        scrollTop: $('.chat-container')[0].scrollHeight\r\n    }, 800)\r\n    \r\nko.bindingHandlers.checkbox =\r\n    init: (element, valueAccessor, allBindings, data, context) ->\r\n        observable = valueAccessor()\r\n\r\n        if not ko.isWriteableObservable(observable)\r\n            throw \"You must pass an observable or writeable computed\"\r\n\r\n        $element = $(element)\r\n\r\n        $element.on \"click\", ->\r\n            observable not observable()\r\n            return\r\n\r\n        ko.computed disposeWhenNodeIsRemoved: element, read: ->\r\n            $element.toggleClass \"active\", observable()\r\n            return\r\n\r\n        return\r\n\r\ngetDate = ->\r\n    date = new Date()\r\n    #date.setMinutes(date.getMinutes() % 5 + 25)\r\n    return date\r\n\r\n\r\nemotes =\r\n    'Kappa': 'kappa'\r\n    'Colgan': 'colgan'\r\n    'NGCCG': 'ngccg'\r\n    ':O': 'shocked'\r\n    'FrankerZ': 'frankerz'\r\n    'YOLOSwag': 'swag'\r\n    'JordanFitz': 'jordanfitz'\r\n    'BeExcellent': 'lincoln'\r\n    'Grrrr': 'brooding'\r\n    'BigBrother': 'bigbrother'\r\n    'Tinfoilboy': 'tinfoilboy'\r\n    'FrankerQ': 'fitzdog'\r\n    'NoHair': 'nohair'\r\n    'OneTomato': 'tomato'\r\n\r\n\r\n$ ->\r\n    $('body').tooltip\r\n        selector: '[rel=tooltip]'\r\n\r\n    ViewModel = ->\r\n        socket = io.connect(window.location.origin)\r\n\r\n        vm = @\r\n\r\n        vm.connected = ko.observable(false)\r\n        vm.clock = ko.observable(getDate())\r\n        vm.state = ko.observable(null)\r\n        vm.chatMessages = ko.observableArray([])\r\n        vm.newChatMessage = ko.observable('')\r\n        vm.doneTomatoes = ko.observableArray([])\r\n        vm.nextTomatoTask = ko.observable('')\r\n        vm.nextTomatoTaskInput = ko.observable('')\r\n\r\n        vm.pastTomatoes = {}\r\n\r\n        vm.clockHeaderMessage = ko.computed ->\r\n            if vm.state == 'tomato' then return 'Tomato Time!'\r\n            if vm.state == 'observing' then return 'Tomato Time!'\r\n            if vm.state == 'tomato' then return 'Tomato Time!'\r\n\r\n        # Things to save\r\n        vm.username = ko.observable('guest')\r\n        vm.userColor = ko.observable('#000000')\r\n        vm.playSound = ko.observable(true)\r\n\r\n\r\n        vm.joinNextTomato = ->\r\n            vm.nextTomatoTask(vm.nextTomatoTaskInput())\r\n            vm.nextTomatoTaskInput('')\r\n\r\n        vm.finishTomato = ->\r\n            if vm.nextTomatoTask() != ''\r\n                vm.doneTomatoes.push\r\n                    task: vm.nextTomatoTask()\r\n                    day: getDate().toDateString()\r\n                socket.emit 'message',\r\n                    username: vm.username()\r\n                    body: \"My tomato task: \" + vm.nextTomatoTask()\r\n                    userColor: vm.userColor()\r\n\r\n                vm.nextTomatoTask('')\r\n\r\n\r\n        vm.restoreFromLocalStorage = ->\r\n            saved = localStorage.getItem('tomatoestogether')\r\n            if saved?\r\n                console.log 'Reading from localStorage' + saved\r\n                saved = JSON.parse(saved)\r\n                vm.username(saved.username or 'guest')\r\n                vm.userColor(saved.userColor or '#000000')\r\n                vm.doneTomatoes(saved.doneTomatoes or [])\r\n                if saved.playSound?\r\n                    vm.playSound(saved.playSound)\r\n\r\n            # This has to be done after the values are read\r\n            # or they will be overwritten\r\n            vm.saveToLocalStorage = ko.computed ->\r\n                console.log 'Saving to localStorage.'\r\n                saved =\r\n                    username: vm.username()\r\n                    userColor: vm.userColor()\r\n                    playSound: vm.playSound()\r\n                    doneTomatoes: vm.doneTomatoes()\r\n                console.log saved\r\n                localStorage.setItem('tomatoestogether', JSON.stringify(saved))\r\n\r\n        vm.tick = ->\r\n            vm.clock(getDate())\r\n\r\n        vm.formattedClock = ko.computed ->\r\n            return util.formatCurrentTime(vm.clock())\r\n\r\n        vm.todaysTomatoes = ko.computed ->\r\n            todays = []\r\n            today = getDate().toDateString()\r\n            for tomato in vm.doneTomatoes()\r\n                if tomato.day == today\r\n                    todays.push(tomato)\r\n            return todays\r\n\r\n        vm.formattedTime = ko.computed ->\r\n            [minutesLeft, secondsLeft, state] = util.tomatoTimeFromHourTime(vm.clock())\r\n            if vm.state()? and vm.state() != state\r\n                if vm.playSound()\r\n                    ringGong()\r\n                if state == 'break'\r\n                    # Finish the current tomato if there is one\r\n                    vm.finishTomato()\r\n            vm.state(state)\r\n            return util.formatTomatoClock(minutesLeft, secondsLeft)\r\n\r\n        vm.sendMessage = (form) ->\r\n            socket.emit 'message',\r\n                username: vm.username()\r\n                body: vm.newChatMessage()\r\n                userColor: vm.userColor()\r\n            vm.newChatMessage('')\r\n\r\n        emoteSrc = (emoteFile) ->\r\n            return '<img src=\"emotes/' + emoteFile + '.png\"/>'\r\n\r\n        vm.addMessage = (message) ->\r\n            for emoteKeyword, emoteFile of emotes\r\n                message.body = message.body.replaceAll(emoteKeyword, emoteSrc(emoteFile))\r\n            message.body = Autolinker.link(message.body, { stripPrefix: false })\r\n\r\n            message.timestamp = new Date(message.timestamp)\r\n\r\n            if message.body.trim().length != 0\r\n                vm.chatMessages.push(message)\r\n                scrollChatToBottom()\r\n\r\n\r\n\r\n\r\n        vm.updateMyInfo = ko.computed ->\r\n            #socket.emit 'setmyinfo', { nick: vm.username() }\r\n\r\n        vm.getUsers = () ->\r\n            socket.emit 'users'\r\n        socket.on 'users', (users) ->\r\n            console.log users\r\n\r\n        vm.getMyInfo = () ->\r\n            socket.emit 'myinfo'\r\n        socket.on 'myinfo', (info) ->\r\n            vm.username(info.nick)\r\n\r\n        vm.setMyInfo = (userinfo) ->\r\n            socket.emit 'setmyinfo', userinfo\r\n\r\n\r\n        socket.on 'user_con', (info) ->\r\n            console.log info.nick + ' connected'\r\n\r\n        socket.on 'user_dis', (info) ->\r\n            console.log info.nick + ' disconnected'\r\n\r\n\r\n        setInterval(vm.tick, 1000)\r\n\r\n        socket.on 'hello', (data) ->\r\n            vm.connected(true)\r\n            for message in data.messages\r\n                vm.addMessage(message)\r\n        socket.on 'message', (message) ->\r\n            vm.addMessage(message)\r\n\r\n        socket.on 'slow-down', () ->\r\n            vm.addMessage({username: 'Server', timestamp: new Date(), body: \"You're sending messages too quickly.\", userColor: '#000'})            \r\n\r\n        vm.restoreFromLocalStorage()\r\n\r\n        window.vm = vm\r\n        null\r\n\r\n    ko.applyBindings(new ViewModel)\r\n\r\n","module.exports =\r\n    saveCompletedTomato: (tomato) ->\r\n        storage = JSON.parse(localStorage.getItem('tomatoestogether'))\r\n        if not storage.tomatoes?\r\n            storage.tomatoes = []\r\n\r\n        storage.tomatoes.append(tomato)\r\n\r\n        localStorage.setItem(JSON.stringify(storage))\r\n","padWithZero = (num) ->\r\n    if num.toString().length == 1\r\n        return '0' + num.toString()\r\n    else\r\n        return num.toString()\r\n\r\nmodule.exports =\r\n    tomatoTimeFromHourTime: (currentTime) ->\r\n        minutes = currentTime.getMinutes()\r\n        seconds = currentTime.getSeconds()\r\n        minutesLeft = 0\r\n        state = null\r\n\r\n        if minutes >= 55\r\n            minutesLeft = 5 - (minutes - 55) - 1\r\n            state = 'break'\r\n        else if minutes >= 30\r\n            minutesLeft = 25 - (minutes - 30) - 1\r\n            state = 'tomato'\r\n        else if minutes >= 25\r\n            minutesLeft = 5 - (minutes - 25) - 1\r\n            state = 'break'\r\n        else\r\n            minutesLeft = 25 - minutes - 1\r\n            state = 'tomato'\r\n        secondsLeft = 60 - seconds - 1\r\n        return [minutesLeft, secondsLeft, state]\r\n\r\n    formatCurrentTime: (date) ->\r\n        hours = date.getHours()\r\n        minutes = date.getMinutes()\r\n        seconds = date.getSeconds()\r\n        return hours + ':' + padWithZero(minutes) + ':' + padWithZero(seconds)\r\n\r\n    formatTomatoClock: (minutesLeft, secondsLeft) ->\r\n        return minutesLeft + ':' + padWithZero(secondsLeft)\r\n"]}