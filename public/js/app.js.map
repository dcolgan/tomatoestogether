{"version":3,"file":"public/js/app.js","sources":["app/main.coffee","app/storage.coffee","app/util.coffee"],"names":[],"mappings":"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","sourcesContent":["util = require('util')\n\n`\n(function() {\n  var autoLink,\n    __slice = [].slice;\n\n  autoLink = function() {\n    var k, linkAttributes, option, options, pattern, v;\n    options = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    pattern = /(^|\\s)((?:https?|ftp):\\/\\/[\\-A-Z0-9+\\u0026@#\\/%?=()~_|!:,.;]*[\\-A-Z0-9+\\u0026@#\\/%=~()_|])/gi;\n    if (!(options.length > 0)) {\n      return this.replace(pattern, \"$1<a target='_blank' href='$2'>$2</a>\");\n    }\n    option = options[0];\n    linkAttributes = ((function() {\n      var _results;\n      _results = [];\n      for (k in option) {\n        v = option[k];\n        if (k !== 'callback') {\n          _results.push(\" \" + k + \"='\" + v + \"'\");\n        }\n      }\n      return _results;\n    })()).join('');\n    return this.replace(pattern, function(match, space, url) {\n      var link;\n      link = (typeof option.callback === \"function\" ? option.callback(url) : void 0) || (\"<a target='_blank' href='\" + url + \"'\" + linkAttributes + \">\" + url + \"</a>\");\n      return \"\" + space + link;\n    });\n  };\n\n  String.prototype['autoLink'] = autoLink;\n\n}).call(this);\n`\n\n\n\nString.prototype.replaceAll = (search, replace) ->\n    if not replace?\n        return @toString()\n    @split(search).join(replace)\n\ngongSound = new Audio('gong.mp3')\n\nringGong = ->\n    gongSound.play()\n\nscrollChatToBottom = ->\n    $('.chat-container').stop().animate({\n        scrollTop: $('.chat-container')[0].scrollHeight\n    }, 800)\n    \nko.bindingHandlers.checkbox =\n    init: (element, valueAccessor, allBindings, data, context) ->\n        observable = valueAccessor()\n\n        if not ko.isWriteableObservable(observable)\n            throw \"You must pass an observable or writeable computed\"\n\n        $element = $(element)\n\n        $element.on \"click\", ->\n            observable not observable()\n            return\n\n        ko.computed disposeWhenNodeIsRemoved: element, read: ->\n            $element.toggleClass \"active\", observable()\n            return\n\n        return\n\ngetDate = ->\n    date = new Date()\n    date.setMinutes(date.getMinutes() % 5 + 25)\n    return date\n\n\nemotes =\n    'Kappa': 'kappa'\n    'Colgan': 'colgan'\n    'NGCCG': 'ngccg'\n    ':O': 'shocked'\n    'FrankerZ': 'frankerz'\n    'YOLOSwag': 'swag'\n    'JordanFitz': 'jordanfitz'\n    'BeExcellent': 'lincoln'\n    'Grrrr': 'brooding'\n    'BigBrother': 'bigbrother'\n    'Tinfoilboy': 'tinfoilboy'\n    'FrankerQ': 'fitzdog'\n    'NoHair': 'nohair'\n    'OneTomato': 'tomato'\n\n\n$ ->\n    $('body').tooltip\n        selector: '[rel=tooltip]'\n\n    ViewModel = ->\n        socket = io.connect(window.location.origin)\n\n        vm = @\n\n        vm.connected = ko.observable(false)\n        vm.clock = ko.observable(getDate())\n        vm.state = ko.observable(null)\n        vm.chatMessages = ko.observableArray([])\n        vm.newChatMessage = ko.observable('')\n        vm.doneTomatoes = ko.observableArray([])\n        vm.nextTomatoTask = ko.observable('')\n        vm.nextTomatoTaskInput = ko.observable('')\n\n        vm.pastTomatoes = {}\n\n        vm.clockHeaderMessage = ko.computed ->\n            if vm.state == 'tomato' then return 'Tomato Time!'\n            if vm.state == 'observing' then return 'Tomato Time!'\n            if vm.state == 'tomato' then return 'Tomato Time!'\n\n        # Things to save\n        vm.username = ko.observable('guest')\n        vm.userColor = ko.observable('#000000')\n        vm.playSound = ko.observable(true)\n\n\n        vm.joinNextTomato = ->\n            vm.nextTomatoTask(vm.nextTomatoTaskInput())\n            vm.nextTomatoTaskInput('')\n\n        vm.finishTomato = ->\n            if vm.nextTomatoTask() != ''\n                vm.doneTomatoes.push\n                    task: vm.nextTomatoTask()\n                    day: getDate().toDateString()\n                socket.emit 'message',\n                    username: vm.username()\n                    body: \"My tomato task: \" + vm.nextTomatoTask()\n                    userColor: vm.userColor()\n\n                vm.nextTomatoTask('')\n\n\n        vm.restoreFromLocalStorage = ->\n            saved = localStorage.getItem('tomatoestogether')\n            if saved?\n                console.log 'Reading from localStorage' + saved\n                saved = JSON.parse(saved)\n                vm.username(saved.username or 'guest')\n                vm.userColor(saved.userColor or '#000000')\n                vm.doneTomatoes(saved.doneTomatoes or [])\n                if saved.playSound?\n                    vm.playSound(saved.playSound)\n\n            # This has to be done after the values are read\n            # or they will be overwritten\n            vm.saveToLocalStorage = ko.computed ->\n                console.log 'Saving to localStorage.'\n                saved =\n                    username: vm.username()\n                    userColor: vm.userColor()\n                    playSound: vm.playSound()\n                    doneTomatoes: vm.doneTomatoes()\n                console.log saved\n                localStorage.setItem('tomatoestogether', JSON.stringify(saved))\n\n        vm.tick = ->\n            vm.clock(getDate())\n\n        vm.formattedClock = ko.computed ->\n            return util.formatCurrentTime(vm.clock())\n\n        vm.todaysTomatoes = ko.computed ->\n            todays = []\n            today = getDate().toDateString()\n            for tomato in vm.doneTomatoes()\n                if tomato.day == today\n                    todays.push(tomato)\n            return todays\n\n        vm.formattedTime = ko.computed ->\n            [minutesLeft, secondsLeft, state] = util.tomatoTimeFromHourTime(vm.clock())\n            if vm.state()? and vm.state() != state\n                if vm.playSound()\n                    ringGong()\n                if state == 'break'\n                    # Finish the current tomato if there is one\n                    vm.finishTomato()\n            vm.state(state)\n            return util.formatTomatoClock(minutesLeft, secondsLeft)\n\n        vm.sendMessage = (form) ->\n            socket.emit 'message',\n                username: vm.username()\n                body: vm.newChatMessage()\n                userColor: vm.userColor()\n            vm.newChatMessage('')\n\n        emoteSrc = (emoteFile) ->\n            return '<img src=\"emotes/' + emoteFile + '.png\"/>'\n\n        vm.addMessage = (message) ->\n            for emoteKeyword, emoteFile of emotes\n                message.body = message.body.replaceAll(emoteKeyword, emoteSrc(emoteFile))\n            debugger\n            message.body = Autolinker.link(message.body, { stripPrefix: false })\n            vm.chatMessages.push(message)\n            scrollChatToBottom()\n\n\n        setInterval(vm.tick, 1000)\n\n        socket.on 'hello', (data) ->\n            vm.connected(true)\n            for message in data.messages\n                vm.addMessage(message)\n        socket.on 'message', (message) ->\n            vm.addMessage(message)\n\n        vm.restoreFromLocalStorage()\n\n        window.vm = vm\n        null\n\n    ko.applyBindings(new ViewModel)\n\n","module.exports =\n    saveCompletedTomato: (tomato) ->\n        storage = JSON.parse(localStorage.getItem('tomatoestogether'))\n        if not storage.tomatoes?\n            storage.tomatoes = []\n\n        storage.tomatoes.append(tomato)\n\n        localStorage.setItem(JSON.stringify(storage))\n","padWithZero = (num) ->\n    if num.toString().length == 1\n        return '0' + num.toString()\n    else\n        return num.toString()\n\nmodule.exports =\n    tomatoTimeFromHourTime: (currentTime) ->\n        minutes = currentTime.getMinutes()\n        seconds = currentTime.getSeconds()\n        minutesLeft = 0\n        state = null\n\n        if minutes >= 55\n            minutesLeft = 5 - (minutes - 55) - 1\n            state = 'break'\n        else if minutes >= 30\n            minutesLeft = 25 - (minutes - 30) - 1\n            state = 'tomato'\n        else if minutes >= 25\n            minutesLeft = 5 - (minutes - 25) - 1\n            state = 'break'\n        else\n            minutesLeft = 25 - minutes - 1\n            state = 'tomato'\n        secondsLeft = 60 - seconds - 1\n        return [minutesLeft, secondsLeft, state]\n\n    formatCurrentTime: (date) ->\n        hours = date.getHours()\n        minutes = date.getMinutes()\n        seconds = date.getSeconds()\n        return hours + ':' + padWithZero(minutes) + ':' + padWithZero(seconds)\n\n    formatTomatoClock: (minutesLeft, secondsLeft) ->\n        return minutesLeft + ':' + padWithZero(secondsLeft)\n"]}